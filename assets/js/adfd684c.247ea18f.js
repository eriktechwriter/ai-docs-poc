"use strict";(self.webpackChunktrend_vision_one_docs=self.webpackChunktrend_vision_one_docs||[]).push([[7179],{27973:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"sample-signed-powershell-script","title":"Sample signed PowerShell script","description":"Refer to the following sample signed PowerShell script for the Run Remote Custom Script response action.","source":"@site/docs/sample-signed-powershell-script.md","sourceDirName":".","slug":"/trend-vision-one-sample-signed-powershell-script","permalink":"/ai-docs-poc/trend-vision-one-sample-signed-powershell-script","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"slug":"trend-vision-one-sample-signed-powershell-script","title":"Sample signed PowerShell script"}}');var s=t(74848),o=t(28453);const i={slug:"trend-vision-one-sample-signed-powershell-script",title:"Sample signed PowerShell script"},a=void 0,l={},c=[];function p(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Refer to the following sample signed PowerShell script for the Run Remote Custom Script response action."}),"\n",(0,s.jsx)(n.p,{children:"Follow the format in the sample script to avoid issues with output encoding and retrieving script parameters."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-codeblock",children:'# Directory structure is as follows:\n# C:\\example\\\n#     |----your_signed_script.ps1\n#     |----tm_script_parameter.txt\n\n# Command line example for launching PowerShell:\n# PowerShell.exe -ExecutionPolicy RemoteSigned -File "C:\\example\\your_signed_script.ps1" "C:\\example\\tm_script_parameter.txt"\n\n# Follow a simple format for your signed script to handle script parameters:\n\n# Use utf8 encoding:\n$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = [Text.UTF8Encoding]::UTF8\n\n# Read raw parameter string from $args[0]:\n$ArgString = Get-Content -Path $args[0] -Encoding UTF8\n\n# Split raw string:\n$InputArgs = $ArgString -split \'\\s+(?=(?:[^"]*"[^"]*")*[^"]*$)\' | Where-Object { $_ -ne \'\' } | ForEach-Object { $_.Trim(\'"\') }\n\nfunction EntryPoint {\n    #####################################################\n    # Your script content goes in the EntryPoint function.\n    \n    # Specify function parameters:\n    [CmdletBinding()]\n    param (\n        [Parameter()][string]$Id,\n        [Parameter()][string]$Name\n    )\n    \n    Write-Host "ID: $Id, Name: $Name"\n    #####################################################\n}\n\n# Change the parameter string array to Params variables:\n$NamedParams = @{}\n$PositionalParams = @()\n\nfor ($i = 0; $i -lt $InputArgs.Length; $i++) {\n    $Arg = $InputArgs[$i]\n\n    if ($Arg.StartsWith("-")) {\n        # Find named parameter:\n        $ParamName = $Arg\n        $ParamValue = $InputArgs[$i + 1]\n        $NamedParams[$ParamName] = $ParamValue\n        $i++\n    } else {\n        # Find positional parameter:\n        $PositionalParams += $Arg\n    }\n}\n\n# Call EntryPoint function with the Params variables:\nEntryPoint @NamedParams @PositionalParams\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);