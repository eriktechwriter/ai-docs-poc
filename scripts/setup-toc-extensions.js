#!/usr/bin/env node

/**
 * TOC Extensions Setup Guide
 * 
 * This script helps users understand and configure the ready-made extensions
 * for table of contents management instead of building custom solutions.
 */

const chalk = require('chalk');

function showTOCExtensionsGuide() {
  console.log(chalk.blue('üìö Table of Contents Management - Using Ready-Made Extensions\n'));
  
  console.log(chalk.green('‚úÖ We use proven VS Code extensions instead of custom solutions:\n'));
  
  console.log(chalk.cyan('üîß Primary Extension: Markdown All in One'));
  console.log('   ‚Ä¢ Automatic TOC generation and updates');
  console.log('   ‚Ä¢ Drag-and-drop list reordering');
  console.log('   ‚Ä¢ Section numbering');
  console.log('   ‚Ä¢ GitHub/GitLab compatible TOC');
  console.log('   ‚Ä¢ Command: "Markdown All in One: Create Table of Contents"');
  console.log('   ‚Ä¢ Auto-updates on save (configurable)\n');
  
  console.log(chalk.cyan('üìñ Supporting Extensions:'));
  console.log('   ‚Ä¢ Bookmarks - Mark important sections for quick navigation');
  console.log('   ‚Ä¢ TODO Tree - Track documentation tasks and improvements');
  console.log('   ‚Ä¢ Mermaid - Visual diagrams in documentation');
  console.log('   ‚Ä¢ Built-in Outline View - Document structure navigation\n');
  
  console.log(chalk.yellow('üöÄ Quick Start:'));
  console.log('1. Open any .md or .mdx file');
  console.log('2. Press Ctrl+Shift+P (Cmd+Shift+P on Mac)');
  console.log('3. Type "Create Table of Contents"');
  console.log('4. Select where to insert the TOC');
  console.log('5. TOC will auto-update when you save the file\n');
  
  console.log(chalk.yellow('‚öôÔ∏è  Configuration Options:'));
  console.log('‚Ä¢ TOC depth levels: markdown.extension.toc.levels');
  console.log('‚Ä¢ Auto-update on save: markdown.extension.toc.updateOnSave');
  console.log('‚Ä¢ GitHub compatibility: markdown.extension.toc.slugifyMode');
  console.log('‚Ä¢ Exclude headings: markdown.extension.toc.omittedFromToc\n');
  
  console.log(chalk.yellow('üéØ Advanced Features:'));
  console.log('‚Ä¢ Add "<!-- omit from toc -->" to exclude specific headings');
  console.log('‚Ä¢ Use section numbering commands for auto-numbering');
  console.log('‚Ä¢ Drag and drop list items to reorder');
  console.log('‚Ä¢ Use bookmarks to mark important sections\n');
  
  console.log(chalk.green('üí° Benefits of Using Ready-Made Extensions:'));
  console.log('‚Ä¢ ‚úÖ Battle-tested by millions of users');
  console.log('‚Ä¢ ‚úÖ Regular updates and bug fixes');
  console.log('‚Ä¢ ‚úÖ Extensive documentation and community support');
  console.log('‚Ä¢ ‚úÖ Integration with VS Code ecosystem');
  console.log('‚Ä¢ ‚úÖ No maintenance overhead for our team');
  console.log('‚Ä¢ ‚úÖ Familiar interface for developers\n');
  
  console.log(chalk.blue('üìã Key Commands:'));
  console.log('‚Ä¢ Ctrl+Shift+P ‚Üí "Create Table of Contents"');
  console.log('‚Ä¢ Ctrl+Shift+P ‚Üí "Update Table of Contents"');
  console.log('‚Ä¢ Ctrl+Shift+P ‚Üí "Add/Remove Section Numbers"');
  console.log('‚Ä¢ Ctrl+Shift+O ‚Üí Navigate to heading in current file');
  console.log('‚Ä¢ Ctrl+T ‚Üí Search headings across all files');
  console.log('‚Ä¢ Ctrl+Shift+F12 ‚Üí Toggle bookmark');
  console.log('‚Ä¢ Ctrl+Shift+L ‚Üí List all bookmarks\n');
  
  console.log(chalk.magenta('üîó Extension Links:'));
  console.log('‚Ä¢ Markdown All in One: https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one');
  console.log('‚Ä¢ Bookmarks: https://marketplace.visualstudio.com/items?itemName=alefragnani.bookmarks');
  console.log('‚Ä¢ TODO Tree: https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree');
  console.log('‚Ä¢ Markdown Mermaid: https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid\n');
  
  console.log(chalk.green('üéâ All extensions are pre-configured in .vscode/extensions.json'));
  console.log(chalk.green('üéâ Settings are optimized in .vscode/settings.json'));
  console.log(chalk.green('üéâ Just install the recommended extensions and start writing!\n'));
}

function showTOCBestPractices() {
  console.log(chalk.blue('üìù TOC Best Practices for Documentation:\n'));
  
  console.log(chalk.yellow('1. Structure Guidelines:'));
  console.log('   ‚Ä¢ Use consistent heading hierarchy (H1 ‚Üí H2 ‚Üí H3)');
  console.log('   ‚Ä¢ Limit TOC depth to 3-4 levels for readability');
  console.log('   ‚Ä¢ Use descriptive, scannable headings');
  console.log('   ‚Ä¢ Group related content under logical sections\n');
  
  console.log(chalk.yellow('2. Maintenance:'));
  console.log('   ‚Ä¢ Enable auto-update on save for consistency');
  console.log('   ‚Ä¢ Review TOC structure during content reviews');
  console.log('   ‚Ä¢ Use "omit from toc" for meta headings');
  console.log('   ‚Ä¢ Keep TOC at the top of long documents\n');
  
  console.log(chalk.yellow('3. Accessibility:'));
  console.log('   ‚Ä¢ Use semantic heading levels (don\'t skip levels)');
  console.log('   ‚Ä¢ Provide meaningful heading text');
  console.log('   ‚Ä¢ Consider screen reader navigation');
  console.log('   ‚Ä¢ Test TOC links work correctly\n');
  
  console.log(chalk.yellow('4. Integration with AI:'));
  console.log('   ‚Ä¢ Well-structured TOCs help AI understand content');
  console.log('   ‚Ä¢ Use consistent terminology in headings');
  console.log('   ‚Ä¢ Include context in heading names');
  console.log('   ‚Ä¢ Structure supports automated content generation\n');
}

// Main execution
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--best-practices') || args.includes('-bp')) {
    showTOCBestPractices();
  } else {
    showTOCExtensionsGuide();
  }
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(chalk.blue('\nUsage:'));
    console.log('  node scripts/setup-toc-extensions.js           # Show extension guide');
    console.log('  node scripts/setup-toc-extensions.js -bp      # Show best practices');
    console.log('  node scripts/setup-toc-extensions.js --help   # Show this help\n');
  }
}

module.exports = {
  showTOCExtensionsGuide,
  showTOCBestPractices
};